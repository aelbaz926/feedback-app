
trigger:
  branches:
    include:
    - main

pool:
  name: sprints-agent


variables:
    dockerHubNamespace: 'ahmedhedihed'
    dockerHubServiceConnection: 'dockerhub-service-connection'



parameters:
- name: environment
  type: string
  default: dev
  values:
  - dev
  - staging
  - prod


stages:
- stage: CI 
  displayName: "CI (Continuous Integration)"
  jobs:
  - job: Linting
    displayName: "Linting backend"
    steps:
    - checkout: self

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.9'
        addToPath: true

    - script: |
        python3.9 -m venv .venv
        source .venv/bin/activate
        pip install flake8
        flake8 src/feedback_backend/app.py
      displayName: "Run Linting"
      workingDirectory: $(Build.SourcesDirectory)

  - job: Test
    dependsOn: Linting
    displayName: "Unit test"
    steps:
    - checkout: self

    - script: |
        python3.9 -m venv .venv
        source .venv/bin/activate
        pip install -r src/feedback_backend/requirements.txt
        pip install pytest
        pytest
      displayName: "Run Unit Tests"
      workingDirectory: $(Build.SourcesDirectory)

  - job: Build
    dependsOn: [Test,Linting]
    displayName: "Build/Push Docker images"
    steps:
    - checkout: self

    - task: Docker@2
      displayName: "Build/Push Back-end Docker image"
      inputs:
        containerRegistry: $(dockerHubServiceConnection)
        repository: $(dockerHubNamespace)/feedback-backend
        command: 'buildAndPush'
        Dockerfile: 'src/feedback_backend/Dockerfile'
        buildContext: '$(Build.SourcesDirectory)/src/feedback_backend'
        tags: '$(Build.BuildId)'


    - task: Docker@2
      displayName: "Build/Push Front-end Docker image"
      inputs:
        containerRegistry: $(dockerHubServiceConnection)
        repository: $(dockerHubNamespace)/feedback-frontend
        command: 'buildAndPush'
        Dockerfile: 'src/feedback_frontend/Dockerfile'
        buildContext: '$(Build.SourcesDirectory)/src/feedback_frontend'
        tags: '$(Build.BuildId)'

- stage: CD
  displayName: CD (Continuous Deployment)
  dependsOn: CI
  jobs:
  - deployment: DeployToEKS
    displayName: Deploy to EKS
    environment: ${{ parameters.environment }}
    strategy:
        runOnce:
            deploy:
                steps:
                - checkout: self
                
                - task: ReplaceTokens@5
                  inputs:
                    rootDirectory: '$(Build.SourcesDirectory)/k8s'
                    targetFiles: "**/*.yaml"
                    tokenPattern: custom
                    tokenPrefix: '${'
                    tokenSuffix: '}'
                    verbosity: detailed
                    escapeType: json

                - task: AWSShellScript@1
                  displayName: 'Login to EKS Cluster'
                  inputs:
                    awsCredentials: 'aws-eks-service-connection'   # replace with your real connection name
                    regionName: 'us-east-1'
                    scriptType: 'inline'
                    inlineScript: |
                      echo "Logging in to EKS cluster"
                      aws eks update-kubeconfig \
                        --region us-east-1 \
                        --name sprints-cluster

                - task: AWSShellScript@1
                  displayName: 'Deploy feedback application'
                  inputs:
                    awsCredentials: 'aws-eks-service-connection'   # replace with your real connection name
                    regionName: 'us-east-1'
                    scriptType: 'inline'
                    inlineScript: |
                      kubectl apply -f $(Build.SourcesDirectory)/k8s/ -n ${{ parameters.environment }}
